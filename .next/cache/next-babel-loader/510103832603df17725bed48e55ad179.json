{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  let form = new FormData();\n  form.append('email', loginData.id);\n  form.append('password', loginData.password);\n  return axios.post(`http://swot.devdogs.kr:8080/api/auth/signin`, form).then(response => {\n    console.log(\"id,password : \" + loginData.id, loginData.password);\n    console.log('response : ', _JSON$stringify(response, null, 2));\n    var result = response.data;\n    return result;\n  }).catch(error => {\n    console.log('failed', error);\n    return error;\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n\n    if (result.statusMsg === \"success\") {\n      yield put({\n        // put은 dispatch 동일\n        type: LOG_IN_SUCCESS\n      });\n      localStorage.setItem(\"accessToken\", result.accessToken);\n      localStorage.setItem(\"refreshToken\", result.refreshToken);\n      alert(\"로그인 성공\");\n      location.href = \"/\";\n    } else {\n      yield put({\n        type: LOG_IN_FAILURE\n      });\n      alert(\"로그인 정보 틀림\");\n      location.href = \"/login\";\n    }\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n    alert(\"통신 장애\");\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n  console.log(signUpData); // 서버에 요청을 보내는 부분\n\n  let form = new FormData();\n  form.append('email', signUpData.id);\n  form.append('password', signUpData.password);\n  form.append('name', signUpData.name);\n  form.append('phone', signUpData.telephone);\n  return axios.post(`http://swot.devdogs.kr:8080/api/auth/signup`, form).then(response => {\n    console.log('response : ', _JSON$stringify(response, null, 2));\n    var result = response.data;\n    return result;\n  }).catch(error => {\n    console.log('failed', error);\n    return error;\n  });\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n\n    if (result.statusMsg === \"success\") {\n      yield put({\n        // put은 dispatch 동일\n        type: SIGN_UP_SUCCESS\n      });\n      alert(\"이메일인증 진행 후 다시 로그인 해 주세요\");\n      location.href = \"/login\";\n    } else {\n      yield put({\n        type: SIGN_UP_FAILURE\n      });\n      alert(\"오류. 다시 진행해\");\n      location.href = \"/signup\";\n    }\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n    alert(\"오류. 다시 진행해\");\n    location.href = \"/signup\";\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:\\Users\\6201-20\\SWOT2\\sagas\\user.js"],"names":["all","call","fork","put","takeEvery","axios","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","logInAPI","loginData","form","FormData","append","id","password","post","then","response","console","log","result","data","catch","error","logIn","action","statusMsg","type","localStorage","setItem","accessToken","refreshToken","alert","location","href","e","watchLogIn","signUpAPI","signUpData","name","telephone","signUp","watchSignUp","logOutAPI","withCredentials","logOut","watchLogOut","loadUserAPI","get","loadUser","watchLoadUser","userSaga"],"mappings":";AAAA,SACIA,GADJ,EAEIC,IAFJ,EAGIC,IAHJ,EAIIC,GAJJ,EAKIC,SALJ,QAMO,oBANP;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,iBADJ,EAEIC,iBAFJ,EAGIC,iBAHJ,EAIIC,cAJJ,EAKIC,cALJ,EAMIC,cANJ,EAOIC,eAPJ,EAQIC,eARJ,EASIC,eATJ,EAUIC,eAVJ,EAWIC,eAXJ,EAYIC,eAZJ,QAaO,kBAbP;;AAeA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AACzB;AACA,MAAIC,IAAI,GAAG,IAAIC,QAAJ,EAAX;AACAD,EAAAA,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAqBH,SAAS,CAACI,EAA/B;AACAH,EAAAA,IAAI,CAACE,MAAL,CAAY,UAAZ,EAAwBH,SAAS,CAACK,QAAlC;AAEA,SAAOnB,KAAK,CAACoB,IAAN,CAAY,6CAAZ,EAA0DL,IAA1D,EACFM,IADE,CACGC,QAAQ,IAAI;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBV,SAAS,CAACI,EAAzC,EAA6CJ,SAAS,CAACK,QAAvD;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,gBAAeF,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAA3B;AACA,QAAIG,MAAM,GAAGH,QAAQ,CAACI,IAAtB;AACA,WAAOD,MAAP;AACH,GANE,EAOFE,KAPE,CAOIC,KAAK,IAAI;AACZL,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBI,KAAtB;AACA,WAAOA,KAAP;AACH,GAVE,CAAP;AAWH;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AAEA,UAAML,MAAM,GAAG,MAAM7B,IAAI,CAACiB,QAAD,EAAWiB,MAAM,CAACJ,IAAlB,CAAzB;;AAEA,QAAGD,MAAM,CAACM,SAAP,KAAmB,SAAtB,EAAgC;AAC5B,YAAMjC,GAAG,CAAC;AAAE;AACRkC,QAAAA,IAAI,EAAE1B;AADA,OAAD,CAAT;AAGA2B,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAmCT,MAAM,CAACU,WAA1C;AACAF,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAoCT,MAAM,CAACW,YAA3C;AACAC,MAAAA,KAAK,CAAC,QAAD,CAAL;AACAC,MAAAA,QAAQ,CAACC,IAAT,GAAgB,GAAhB;AACH,KARD,MASI;AACA,YAAMzC,GAAG,CAAC;AACNkC,QAAAA,IAAI,EAAE5B;AADA,OAAD,CAAT;AAGAiC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACAC,MAAAA,QAAQ,CAACC,IAAT,GAAgB,QAAhB;AACH;AAEJ,GArBD,CAqBE,OAAOC,CAAP,EAAU;AAAE;AACVjB,IAAAA,OAAO,CAACK,KAAR,CAAcY,CAAd;AACA,UAAM1C,GAAG,CAAC;AACNkC,MAAAA,IAAI,EAAE5B;AADA,KAAD,CAAT;AAGAiC,IAAAA,KAAK,CAAC,OAAD,CAAL;AACH;AACJ;;AAED,UAAUI,UAAV,GAAuB;AACnB,QAAM1C,SAAS,CAACM,cAAD,EAAiBwB,KAAjB,CAAf;AACH;;AAED,SAASa,SAAT,CAAmBC,UAAnB,EAA+B;AAC3BpB,EAAAA,OAAO,CAACC,GAAR,CAAYmB,UAAZ,EAD2B,CAE3B;;AACA,MAAI5B,IAAI,GAAG,IAAIC,QAAJ,EAAX;AACAD,EAAAA,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAqB0B,UAAU,CAACzB,EAAhC;AACAH,EAAAA,IAAI,CAACE,MAAL,CAAY,UAAZ,EAAwB0B,UAAU,CAACxB,QAAnC;AACAJ,EAAAA,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoB0B,UAAU,CAACC,IAA/B;AACA7B,EAAAA,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAqB0B,UAAU,CAACE,SAAhC;AAEA,SAAO7C,KAAK,CAACoB,IAAN,CAAY,6CAAZ,EAA0DL,IAA1D,EACFM,IADE,CACGC,QAAQ,IAAI;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,gBAAeF,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAA3B;AACA,QAAIG,MAAM,GAAGH,QAAQ,CAACI,IAAtB;AACA,WAAOD,MAAP;AACH,GALE,EAMFE,KANE,CAMIC,KAAK,IAAI;AACZL,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBI,KAAtB;AACA,WAAOA,KAAP;AACH,GATE,CAAP;AAUH;;AAED,UAAUkB,MAAV,CAAiBhB,MAAjB,EAAyB;AACrB,MAAI;AACA,UAAML,MAAM,GAAG,MAAM7B,IAAI,CAAC8C,SAAD,EAAYZ,MAAM,CAACJ,IAAnB,CAAzB;;AAEA,QAAGD,MAAM,CAACM,SAAP,KAAmB,SAAtB,EAAgC;AAC5B,YAAMjC,GAAG,CAAC;AAAE;AACRkC,QAAAA,IAAI,EAAEpB;AADA,OAAD,CAAT;AAGAyB,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACAC,MAAAA,QAAQ,CAACC,IAAT,GAAgB,QAAhB;AACH,KAND,MAOI;AACA,YAAMzC,GAAG,CAAC;AACNkC,QAAAA,IAAI,EAAEtB;AADA,OAAD,CAAT;AAGA2B,MAAAA,KAAK,CAAC,YAAD,CAAL;AACAC,MAAAA,QAAQ,CAACC,IAAT,GAAgB,SAAhB;AACH;AAEJ,GAlBD,CAkBE,OAAOC,CAAP,EAAU;AAAE;AACVjB,IAAAA,OAAO,CAACK,KAAR,CAAcY,CAAd;AACA,UAAM1C,GAAG,CAAC;AACNkC,MAAAA,IAAI,EAAEtB,eADA;AAENkB,MAAAA,KAAK,EAAEY;AAFD,KAAD,CAAT;AAIAH,IAAAA,KAAK,CAAC,YAAD,CAAL;AACIC,IAAAA,QAAQ,CAACC,IAAT,GAAgB,SAAhB;AACP;AACJ;;AAED,UAAUQ,WAAV,GAAwB;AACpB,QAAMhD,SAAS,CAACY,eAAD,EAAkBmC,MAAlB,CAAf;AACH;;AAED,SAASE,SAAT,GAAqB;AACjB;AACA,SAAOhD,KAAK,CAACoB,IAAN,CAAW,cAAX,EAA2B,EAA3B,EAA+B;AAClC6B,IAAAA,eAAe,EAAE;AADiB,GAA/B,CAAP;AAGH;;AAED,UAAUC,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMtD,IAAI,CAACoD,SAAD,CAAV;AACA,UAAMlD,GAAG,CAAC;AAAE;AACRkC,MAAAA,IAAI,EAAEvB;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAO+B,CAAP,EAAU;AAAE;AACVjB,IAAAA,OAAO,CAACK,KAAR,CAAcY,CAAd;AACA,UAAM1C,GAAG,CAAC;AACNkC,MAAAA,IAAI,EAAEzB,eADA;AAENqB,MAAAA,KAAK,EAAEY;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUW,WAAV,GAAwB;AACpB,QAAMpD,SAAS,CAACS,eAAD,EAAkB0C,MAAlB,CAAf;AACH;;AAED,SAASE,WAAT,GAAuB;AACnB;AACA,SAAOpD,KAAK,CAACqD,GAAN,CAAU,QAAV,EAAoB;AACvBJ,IAAAA,eAAe,EAAE;AADM,GAApB,CAAP;AAGH;;AAED,UAAUK,QAAV,GAAqB;AACjB,MAAI;AACA;AACA,UAAM7B,MAAM,GAAG,MAAM7B,IAAI,CAACwD,WAAD,CAAzB;AACA,UAAMtD,GAAG,CAAC;AAAE;AACRkC,MAAAA,IAAI,EAAE7B,iBADA;AAENuB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOc,CAAP,EAAU;AAAE;AACVjB,IAAAA,OAAO,CAACK,KAAR,CAAcY,CAAd;AACA,UAAM1C,GAAG,CAAC;AACNkC,MAAAA,IAAI,EAAE/B,iBADA;AAEN2B,MAAAA,KAAK,EAAEY;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUe,aAAV,GAA0B;AACtB,QAAMxD,SAAS,CAACG,iBAAD,EAAoBoD,QAApB,CAAf;AACH;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAM7D,GAAG,CAAC,CACNE,IAAI,CAAC4C,UAAD,CADE,EAEN5C,IAAI,CAACsD,WAAD,CAFE,EAGNtD,IAAI,CAAC0D,aAAD,CAHE,EAIN1D,IAAI,CAACkD,WAAD,CAJE,CAAD,CAAT;AAMH","sourcesContent":["import {\n    all,\n    call,\n    fork,\n    put,\n    takeEvery\n} from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    LOAD_USER_FAILURE,\n    LOAD_USER_REQUEST,\n    LOAD_USER_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_IN_REQUEST,\n    LOG_IN_SUCCESS,\n    LOG_OUT_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_SUCCESS,\n    SIGN_UP_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS,\n} from '../reducers/user';\n\nfunction logInAPI(loginData) {\n    // 서버에 요청을 보내는 부분\n    let form = new FormData()\n    form.append('email', loginData.id)\n    form.append('password', loginData.password)\n\n    return axios.post(`http://swot.devdogs.kr:8080/api/auth/signin`, form)\n        .then(response => {\n            console.log(\"id,password : \" + loginData.id, loginData.password);\n            console.log('response : ', JSON.stringify(response, null, 2));\n            var result = response.data;\n            return result;\n        })\n        .catch(error => {\n            console.log('failed', error)\n            return error;\n        })\n}\n\nfunction* logIn(action) {\n    try {\n        \n        const result = yield call(logInAPI, action.data);\n\n        if(result.statusMsg===\"success\"){\n            yield put({ // put은 dispatch 동일\n                type: LOG_IN_SUCCESS,\n            });\n            localStorage.setItem(\"accessToken\",result.accessToken);\n            localStorage.setItem(\"refreshToken\",result.refreshToken);\n            alert(\"로그인 성공\");\n            location.href = \"/\"\n        }\n        else{\n            yield put({\n                type: LOG_IN_FAILURE,\n            });\n            alert(\"로그인 정보 틀림\");\n            location.href = \"/login\"\n        }\n\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE,\n        });\n        alert(\"통신 장애\");\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n    console.log(signUpData);\n    // 서버에 요청을 보내는 부분\n    let form = new FormData()\n    form.append('email', signUpData.id)\n    form.append('password', signUpData.password)\n    form.append('name', signUpData.name)\n    form.append('phone', signUpData.telephone)\n\n    return axios.post(`http://swot.devdogs.kr:8080/api/auth/signup`, form)\n        .then(response => {\n            console.log('response : ', JSON.stringify(response, null, 2))\n            var result = response.data;\n            return result;\n        })\n        .catch(error => {\n            console.log('failed', error)\n            return error;\n        })\n}\n\nfunction* signUp(action) {\n    try {\n        const result = yield call(signUpAPI, action.data);\n\n        if(result.statusMsg===\"success\"){\n            yield put({ // put은 dispatch 동일\n                type: SIGN_UP_SUCCESS,\n            });\n            alert(\"이메일인증 진행 후 다시 로그인 해 주세요\")\n            location.href = \"/login\"\n        }\n        else{\n            yield put({\n                type: SIGN_UP_FAILURE,\n            });\n            alert(\"오류. 다시 진행해\")\n            location.href = \"/signup\"\n        }\n        \n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: e,\n        });\n        alert(\"오류. 다시 진행해\")\n            location.href = \"/signup\"\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n    // 서버에 요청을 보내는 부분\n    return axios.post('/user/logout', {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* logOut() {\n    try {\n        // yield call(logOutAPI);\n        yield call(logOutAPI);\n        yield put({ // put은 dispatch 동일\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogOut() {\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI() {\n    // 서버에 요청을 보내는 부분\n    return axios.get('/user/', {\n        withCredentials: true,\n    });\n}\n\nfunction* loadUser() {\n    try {\n        // yield call(loadUserAPI);\n        const result = yield call(loadUserAPI);\n        yield put({ // put은 dispatch 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: LOAD_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadUser() {\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchLoadUser),\n        fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}