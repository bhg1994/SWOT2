{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logIn),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogIn),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logOut),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogOut),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUser),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUser),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  var form = new FormData();\n  form.append('email', loginData.id);\n  form.append('password', loginData.password);\n  return axios.post(\"http://swot.devdogs.kr:8080/api/auth/signin\", form).then(function (response) {\n    console.log(\"id,password : \" + loginData.id, loginData.password);\n    console.log('response : ', _JSON$stringify(response, null, 2));\n    var result = response.data;\n    return result;\n  })[\"catch\"](function (error) {\n    console.log('failed', error);\n    return error;\n  });\n}\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n\n          if (!(result.statusMsg === \"success\")) {\n            _context.next = 13;\n            break;\n          }\n\n          _context.next = 7;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 7:\n          localStorage.setItem(\"accessToken\", result.accessToken);\n          localStorage.setItem(\"refreshToken\", result.refreshToken);\n          alert(\"로그인 성공\");\n          location.href = \"/\";\n          _context.next = 17;\n          break;\n\n        case 13:\n          _context.next = 15;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 15:\n          alert(\"로그인 정보 틀림\");\n          location.href = \"/login\";\n\n        case 17:\n          _context.next = 25;\n          break;\n\n        case 19:\n          _context.prev = 19;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 24;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 24:\n          alert(\"통신 장애\");\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 19]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction signUpAPI(signUpData) {\n  console.log(signUpData); // 서버에 요청을 보내는 부분\n\n  var form = new FormData();\n  form.append('email', signUpData.id);\n  form.append('password', signUpData.password);\n  form.append('name', signUpData.name);\n  form.append('phone', signUpData.telephone);\n  return axios.post(\"http://swot.devdogs.kr:8080/api/auth/signup\", form).then(function (response) {\n    console.log('response : ', _JSON$stringify(response, null, 2));\n  })[\"catch\"](function (error) {\n    console.log('failed', error);\n  });\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          _context5.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context5.next = 12;\n          break;\n\n        case 7:\n          _context5.prev = 7;\n          _context5.t0 = _context5[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context5.t0);\n          _context5.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 7]]);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction loadUserAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction loadUser() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadUserAPI);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            // put은 dispatch 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_USER_FAILURE,\n            error: _context7.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:\\Users\\6201-20\\SWOT2\\sagas\\user.js"],"names":["logIn","watchLogIn","signUp","watchSignUp","logOut","watchLogOut","loadUser","watchLoadUser","userSaga","all","call","fork","put","takeEvery","axios","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","logInAPI","loginData","form","FormData","append","id","password","post","then","response","console","log","result","data","error","action","statusMsg","type","localStorage","setItem","accessToken","refreshToken","alert","location","href","signUpAPI","signUpData","name","telephone","logOutAPI","withCredentials","loadUserAPI","get"],"mappings":"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","sourcesContent":["import {\n    all,\n    call,\n    fork,\n    put,\n    takeEvery\n} from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    LOAD_USER_FAILURE,\n    LOAD_USER_REQUEST,\n    LOAD_USER_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_IN_REQUEST,\n    LOG_IN_SUCCESS,\n    LOG_OUT_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_SUCCESS,\n    SIGN_UP_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS,\n} from '../reducers/user';\n\nfunction logInAPI(loginData) {\n    // 서버에 요청을 보내는 부분\n    let form = new FormData()\n    form.append('email', loginData.id)\n    form.append('password', loginData.password)\n\n    return axios.post(`http://swot.devdogs.kr:8080/api/auth/signin`, form)\n        .then(response => {\n            console.log(\"id,password : \" + loginData.id, loginData.password);\n            console.log('response : ', JSON.stringify(response, null, 2));\n            var result = response.data;\n            return result;\n        })\n        .catch(error => {\n            console.log('failed', error)\n            return error;\n        })\n}\n\nfunction* logIn(action) {\n    try {\n        \n        const result = yield call(logInAPI, action.data);\n\n        if(result.statusMsg===\"success\"){\n            yield put({ // put은 dispatch 동일\n                type: LOG_IN_SUCCESS,\n            });\n            localStorage.setItem(\"accessToken\",result.accessToken);\n            localStorage.setItem(\"refreshToken\",result.refreshToken);\n            alert(\"로그인 성공\");\n            location.href = \"/\"\n        }\n        else{\n            yield put({\n                type: LOG_IN_FAILURE,\n            });\n            alert(\"로그인 정보 틀림\");\n            location.href = \"/login\"\n        }\n\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE,\n        });\n        alert(\"통신 장애\");\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n    console.log(signUpData);\n    // 서버에 요청을 보내는 부분\n    let form = new FormData()\n    form.append('email', signUpData.id)\n    form.append('password', signUpData.password)\n    form.append('name', signUpData.name)\n    form.append('phone', signUpData.telephone)\n\n    return axios.post(`http://swot.devdogs.kr:8080/api/auth/signup`, form)\n        .then(response => {\n            console.log('response : ', JSON.stringify(response, null, 2))\n        })\n        .catch(error => {\n            console.log('failed', error)\n        })\n}\n\nfunction* signUp(action) {\n    try {\n        // yield call(signUpAPI);\n        yield call(signUpAPI, action.data);\n        yield put({ // put은 dispatch 동일\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n    // 서버에 요청을 보내는 부분\n    return axios.post('/user/logout', {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* logOut() {\n    try {\n        // yield call(logOutAPI);\n        yield call(logOutAPI);\n        yield put({ // put은 dispatch 동일\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogOut() {\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI() {\n    // 서버에 요청을 보내는 부분\n    return axios.get('/user/', {\n        withCredentials: true,\n    });\n}\n\nfunction* loadUser() {\n    try {\n        // yield call(loadUserAPI);\n        const result = yield call(loadUserAPI);\n        yield put({ // put은 dispatch 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: LOAD_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadUser() {\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchLoadUser),\n        fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}