{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  let form = new FormData();\n  form.append('email', loginData.id);\n  form.append('password', loginData.password);\n  return axios.post(`http://swot.devdogs.kr:8080/api/auth/signin`, form).then(response => {\n    console.log(\"id,password : \" + loginData.id, loginData.password);\n    console.log('response : ', _JSON$stringify(response, null, 2));\n    const result = response.data;\n    console.log(result.accessToken);\n    return result;\n  }).catch(error => {\n    console.log('failed', error);\n  });\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    let tokens = {\n      accessToken: result.accessToken,\n      refreshToken: result.refreshToken\n    };\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_IN_SUCCESS,\n      data: tokens\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n  console.log(signUpData); // 서버에 요청을 보내는 부분\n\n  let form = new FormData();\n  form.append('email', signUpData.id);\n  form.append('password', signUpData.password);\n  form.append('name', signUpData.name);\n  form.append('phone', signUpData.telephone);\n  return axios.post(`http://swot.devdogs.kr:8080/api/auth/signup`, form).then(response => {\n    console.log('response : ', _JSON$stringify(response, null, 2));\n  }).catch(error => {\n    console.log('failed', error);\n  });\n}\n\nfunction* signUp(action) {\n  try {\n    // yield call(signUpAPI);\n    yield call(signUpAPI, action.data);\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut() {\n  try {\n    // yield call(logOutAPI);\n    yield call(logOutAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI() {\n  // 서버에 요청을 보내는 부분\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    // yield call(loadUserAPI);\n    const result = yield call(loadUserAPI);\n    yield put({\n      // put은 dispatch 동일\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:\\Users\\6201-20\\SWOT2\\sagas\\user.js"],"names":["all","call","fork","put","takeEvery","axios","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","logInAPI","loginData","form","FormData","append","id","password","post","then","response","console","log","result","data","accessToken","catch","error","logIn","action","tokens","refreshToken","type","e","watchLogIn","signUpAPI","signUpData","name","telephone","signUp","watchSignUp","logOutAPI","withCredentials","logOut","watchLogOut","loadUserAPI","get","loadUser","watchLoadUser","userSaga"],"mappings":"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","sourcesContent":["import {\n    all,\n    call,\n    fork,\n    put,\n    takeEvery\n} from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    LOAD_USER_FAILURE,\n    LOAD_USER_REQUEST,\n    LOAD_USER_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_IN_REQUEST,\n    LOG_IN_SUCCESS,\n    LOG_OUT_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_SUCCESS,\n    SIGN_UP_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS,\n} from '../reducers/user';\n\nfunction logInAPI(loginData) {\n    // 서버에 요청을 보내는 부분\n    let form = new FormData()\n    form.append('email', loginData.id)\n    form.append('password', loginData.password)\n\n    return axios.post(`http://swot.devdogs.kr:8080/api/auth/signin`, form)\n        .then(response => {\n            console.log(\"id,password : \" + loginData.id, loginData.password);\n            console.log('response : ', JSON.stringify(response, null, 2));\n            const result = response.data;\n            console.log(result.accessToken);\n            return result;\n        })\n        .catch(error => {\n            console.log('failed', error)\n        })\n}\n\nfunction* logIn(action) {\n    try {\n        const result = yield call(logInAPI, action.data);\n        let tokens = { \n            accessToken: result.accessToken,\n            refreshToken: result.refreshToken,     \n        }\n        yield put({ // put은 dispatch 동일\n            type: LOG_IN_SUCCESS,\n            data: tokens,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE,\n        });\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n    console.log(signUpData);\n    // 서버에 요청을 보내는 부분\n    let form = new FormData()\n    form.append('email', signUpData.id)\n    form.append('password', signUpData.password)\n    form.append('name', signUpData.name)\n    form.append('phone', signUpData.telephone)\n\n    return axios.post(`http://swot.devdogs.kr:8080/api/auth/signup`, form)\n        .then(response => {\n            console.log('response : ', JSON.stringify(response, null, 2))\n        })\n        .catch(error => {\n            console.log('failed', error)\n        })\n}\n\nfunction* signUp(action) {\n    try {\n        // yield call(signUpAPI);\n        yield call(signUpAPI, action.data);\n        yield put({ // put은 dispatch 동일\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n    // 서버에 요청을 보내는 부분\n    return axios.post('/user/logout', {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* logOut() {\n    try {\n        // yield call(logOutAPI);\n        yield call(logOutAPI);\n        yield put({ // put은 dispatch 동일\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogOut() {\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI() {\n    // 서버에 요청을 보내는 부분\n    return axios.get('/user/', {\n        withCredentials: true,\n    });\n}\n\nfunction* loadUser() {\n    try {\n        // yield call(loadUserAPI);\n        const result = yield call(loadUserAPI);\n        yield put({ // put은 dispatch 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: LOAD_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadUser() {\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchLoadUser),\n        fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}