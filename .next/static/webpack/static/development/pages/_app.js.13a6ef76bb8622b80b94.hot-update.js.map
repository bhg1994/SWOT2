{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.13a6ef76bb8622b80b94.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import {\n    all,\n    call,\n    fork,\n    put,\n    takeEvery\n} from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    LOAD_USER_FAILURE,\n    LOAD_USER_REQUEST,\n    LOAD_USER_SUCCESS,\n    LOG_IN_FAILURE,\n    LOG_IN_REQUEST,\n    LOG_IN_SUCCESS,\n    LOG_OUT_FAILURE,\n    LOG_OUT_REQUEST,\n    LOG_OUT_SUCCESS,\n    SIGN_UP_FAILURE,\n    SIGN_UP_REQUEST,\n    SIGN_UP_SUCCESS,\n    RESERVATION_REQUEST,\n} from '../reducers/user';\n\nfunction logInAPI(loginData) {\n    // 서버에 요청을 보내는 부분\n    let form = new FormData()\n    form.append('email', loginData.id)\n    form.append('password', loginData.password)\n\n    return axios.post(`http://swot.devdogs.kr:8080/api/auth/signin`, form)\n        .then(response => {\n            console.log(\"id,password : \" + loginData.id, loginData.password);\n            console.log('response : ', JSON.stringify(response, null, 2));\n            var result = response.data;\n            return result;\n        })\n        .catch(error => {\n            console.log('failed', error)\n            return error;\n        })\n}\n\nfunction* logIn(action) {\n    try {\n        \n        const result = yield call(logInAPI, action.data);\n\n        if(result.statusMsg===\"success\"){\n            yield put({ // put은 dispatch 동일\n                type: LOG_IN_SUCCESS,\n            });\n            localStorage.setItem(\"accessToken\",result.accessToken);\n            localStorage.setItem(\"refreshToken\",result.refreshToken);\n            alert(\"로그인 성공\");\n            location.href = \"/\"\n        }\n        else{\n            yield put({\n                type: LOG_IN_FAILURE,\n            });\n            alert(\"로그인 정보 틀림\");\n            location.href = \"/login\"\n        }\n\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: LOG_IN_FAILURE,\n        });\n        alert(\"통신 장애\");\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeEvery(LOG_IN_REQUEST, logIn);\n}\n\nfunction signUpAPI(signUpData) {\n    console.log(signUpData);\n    // 서버에 요청을 보내는 부분\n    let form = new FormData()\n    form.append('email', signUpData.id)\n    form.append('password', signUpData.password)\n    form.append('name', signUpData.name)\n    form.append('phone', signUpData.telephone)\n\n    return axios.post(`http://swot.devdogs.kr:8080/api/auth/signup`, form)\n        .then(response => {\n            console.log('response : ', JSON.stringify(response, null, 2))\n            var result = response.data;\n            return result;\n        })\n        .catch(error => {\n            console.log('failed', error)\n            return error;\n        })\n}\n\nfunction* signUp(action) {\n    try {\n        const result = yield call(signUpAPI, action.data);\n\n        if(result.statusMsg===\"success\"){\n            yield put({ // put은 dispatch 동일\n                type: SIGN_UP_SUCCESS,\n            });\n            alert(\"이메일인증 진행 후 다시 로그인 해 주세요\");\n            location.href = \"/login\";\n        }\n        else{\n            yield put({\n                type: SIGN_UP_FAILURE,\n            });\n            alert(\"오류. 다시 진행해\");\n            location.href = \"/signup\";\n        }\n        \n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: e,\n        });\n        alert(\"오류. 다시 진행해\");\n        location.href = \"/signup\";\n    }\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n    // 서버에 요청을 보내는 부분\n    return axios.post('/user/logout', {}, {\n        withCredentials: true,\n    });\n}\n\nfunction* logOut() {\n    try {\n        // yield call(logOutAPI);\n        yield call(logOutAPI);\n        yield put({ // put은 dispatch 동일\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLogOut() {\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI() {\n    // 서버에 요청을 보내는 부분\n    return axios.get('/user/', {\n        withCredentials: true,\n    });\n}\n\nfunction* loadUser() {\n    try {\n        // yield call(loadUserAPI);\n        const result = yield call(loadUserAPI);\n        yield put({ // put은 dispatch 동일\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n        });\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: LOAD_USER_FAILURE,\n            error: e,\n        });\n    }\n}\n\nfunction* watchLoadUser() {\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchLoadUser),\n        fork(watchSignUp),\n    ]);\n}\n\n\n\n\n\n\n\n\nfunction reservateAPI(reservateData) {\n    // 서버에 요청을 보내는 부분\n    let form = new FormData()\n    // form.append('email', reservateData.id)\n    // form.append('password', reservateData.password)\n\n    return axios.post(`http://swot.devdogs.kr:8080/api/auth/signin`, form)\n        .then(response => {\n            console.log('response : ', JSON.stringify(response, null, 2));\n            var result = response.data;\n            return result;\n        })\n        .catch(error => {\n            console.log('failed', error)\n            return error;\n        })\n}\n\nfunction* reservate(action) {\n    try {\n        \n        const result = yield call(reservateAPI, action.data);\n\n        if(result.statusMsg===\"success\"){\n            yield put({ // put은 dispatch 동일\n                type: RESERVATION_SUCCESS,\n            });\n            alert(\"예약 성공\");\n            location.href = \"/\"\n        }\n        else{\n            yield put({\n                type: RESERVATION_FAILURE,\n            });\n            alert(\"예약 실패\");\n            location.href = \"/Reservation\"\n        }\n\n    } catch (e) { // loginAPI 실패\n        console.error(e);\n        yield put({\n            type: RESERVATION_FAILURE,\n        });\n        alert(\"통신 장애\");\n    }\n}\n\nfunction* watchReservation() {\n    yield takeEvery(RESERVATION_REQUEST, reservate);\n}"],"mappings":"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","sourceRoot":""}