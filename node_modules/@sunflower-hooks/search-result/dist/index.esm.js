import { useState, useEffect } from 'react';

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var useSearchResult = function useSearchResult(_ref) {
  var search = _ref.search,
      _ref$autoFirstSearch = _ref.autoFirstSearch,
      autoFirstSearch = _ref$autoFirstSearch === void 0 ? true : _ref$autoFirstSearch,
      defaultRequestData = _ref.defaultRequestData;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      requestData = _useState2[0],
      setRequestData = _useState2[1];

  var _useState3 = useState(),
      _useState4 = _slicedToArray(_useState3, 2),
      responseData = _useState4[0],
      setResponseData = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      loading = _useState6[0],
      setLoading = _useState6[1];

  var _useState7 = useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      defaultRequestDataLoading = _useState8[0],
      setDefaultRequestDataLoading = _useState8[1];

  var searchFunc = function searchFunc(data) {
    setRequestData(data);
    setLoading(true);
    return Promise.resolve(search && search(data)).then(function (response) {
      setResponseData(response);
      setLoading(false);
    });
  };

  useEffect(function () {
    setDefaultRequestDataLoading(true);
    var value;

    if (typeof defaultRequestData === 'function') {
      value = defaultRequestData();
    } else {
      value = defaultRequestData;
    }

    Promise.resolve(value).then(function (data) {
      setRequestData(data);
      setDefaultRequestDataLoading(false);

      if (autoFirstSearch) {
        searchFunc(data);
      }
    }).catch(function () {
      setDefaultRequestDataLoading(false);
    });
  }, []);
  return {
    loading: loading,
    requestData: requestData,
    setRequestData: setRequestData,
    responseData: responseData,
    defaultRequestDataLoading: defaultRequestDataLoading,
    search: searchFunc
  };
};

export { useSearchResult };
