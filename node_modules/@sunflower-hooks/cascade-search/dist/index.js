'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var useCascadeSearch = function useCascadeSearch(_ref) {
  var _ref$list = _ref.list,
      list = _ref$list === void 0 ? [] : _ref$list;

  var _useState = react.useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      responseDataList = _useState2[0],
      setResponseDataList = _useState2[1];

  var _useState3 = react.useState(list.map(function () {
    return false;
  })),
      _useState4 = _slicedToArray(_useState3, 2),
      loadingList = _useState4[0],
      setLoadingList = _useState4[1];

  var search = function search(index) {
    if (index >= list.length || index < 0) {
      return;
    }

    if (index > 0 && !responseDataList[index - 1]) {
      return;
    }

    var array = _toConsumableArray(responseDataList.slice(0, index));

    setResponseDataList(array);

    var loading = _toConsumableArray(loadingList);

    loading[index] = true;
    setLoadingList(loading);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    Promise.resolve(list[index].apply(list, [responseDataList[index - 1]].concat(args))).then(function (value) {
      var nextArray = _toConsumableArray(responseDataList.slice(0, index + 1));

      nextArray[index] = value;

      var nextLoading = _toConsumableArray(loadingList);

      nextLoading[index] = false;
      setLoadingList(nextLoading);
      setResponseDataList(nextArray);
    });
  };

  return {
    search: search,
    responseDataList: responseDataList,
    loadingList: loadingList,
    setResponseDataList: setResponseDataList
  };
};

exports.useCascadeSearch = useCascadeSearch;
