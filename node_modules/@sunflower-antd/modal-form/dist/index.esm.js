import { useModal } from '@sunflower-antd/modal';
import { useForm } from '@sunflower-antd/form';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var useModalForm = function useModalForm(config) {
  var modalFormConfig = config || {};
  var _modalFormConfig$defa = modalFormConfig.defaultVisible,
      defaultVisible = _modalFormConfig$defa === void 0 ? false : _modalFormConfig$defa,
      _modalFormConfig$auto = modalFormConfig.autoSubmitClose,
      autoSubmitClose = _modalFormConfig$auto === void 0 ? true : _modalFormConfig$auto,
      _modalFormConfig$auto2 = modalFormConfig.autoResetForm,
      autoResetForm = _modalFormConfig$auto2 === void 0 ? true : _modalFormConfig$auto2,
      submit = modalFormConfig.submit,
      form = modalFormConfig.form,
      defaultFormValues = modalFormConfig.defaultFormValues;

  var _useModal = useModal({
    defaultVisible: defaultVisible
  }),
      visible = _useModal.visible,
      show = _useModal.show,
      close = _useModal.close,
      modalProps = _useModal.modalProps;

  var _useForm = useForm({
    form: form,
    submit: submit,
    defaultFormValues: defaultFormValues
  }),
      formInstance = _useForm.form,
      formProps = _useForm.formProps,
      formLoading = _useForm.formLoading,
      defaultFormValuesLoading = _useForm.defaultFormValuesLoading,
      formValues = _useForm.formValues,
      initialValues = _useForm.initialValues,
      formResult = _useForm.formResult,
      formSubmit = _useForm.submit;

  var modalFormProps = _objectSpread2({}, modalProps, {
    onOk: function onOk() {
      formSubmit().then(function () {
        if (autoSubmitClose) {
          close();
        }

        if (autoResetForm) {
          formInstance.resetFields();
        }
      });
    }
  });

  return {
    form: formInstance,
    visible: visible,
    show: show,
    close: close,
    modalProps: modalFormProps,
    formProps: formProps,
    formLoading: formLoading,
    defaultFormValuesLoading: defaultFormValuesLoading,
    formValues: formValues,
    initialValues: initialValues,
    formResult: formResult,
    submit: formSubmit
  };
};

export { useModalForm };
