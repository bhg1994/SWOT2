'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('antd/es/form/style');
var _Form = _interopDefault(require('antd/es/form'));
var react = require('react');

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var useForm = function useForm(config) {
  var _useState = react.useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      defaultFormValuesLoading = _useState2[0],
      setDefaultFormValuesLoading = _useState2[1];

  var _useState3 = react.useState({}),
      _useState4 = _slicedToArray(_useState3, 2),
      initialValues = _useState4[0],
      setInitialValues = _useState4[1];

  var defaultFormValues = config.defaultFormValues,
      form = config.form,
      submit = config.submit;

  var _useState5 = react.useState({}),
      _useState6 = _slicedToArray(_useState5, 2),
      formValues = _useState6[0],
      setFormValues = _useState6[1];

  var _useState7 = react.useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      formLoading = _useState8[0],
      setFormLoading = _useState8[1];

  var _useState9 = react.useState(),
      _useState10 = _slicedToArray(_useState9, 2),
      formResult = _useState10[0],
      setFormResult = _useState10[1];

  var version = 3; // antd4

  if (_Form['useForm']) {
    version = 4;
  }

  var formInstance = form;

  if (!form) {
    if (version === 4) {
      var _Form$useForm = _Form['useForm']();

      var _Form$useForm2 = _slicedToArray(_Form$useForm, 1);

      formInstance = _Form$useForm2[0];
    } else {
      throw new Error('"form" need in antd@3');
    }
  }

  var onFinish = function onFinish(values) {
    setFormValues(values);
    setFormLoading(true);
    return Promise.resolve(submit(values)).then(function (data) {
      setFormLoading(false);
      setFormResult(data);
      return data;
    }).catch(function (err) {
      setFormLoading(false);
    });
  };

  react.useEffect(function () {
    if (!defaultFormValues) {
      return;
    }

    var value;

    if (typeof defaultFormValues === 'function') {
      setDefaultFormValuesLoading(true);
      value = defaultFormValues();
    } else {
      value = defaultFormValues;
    }

    Promise.resolve(value).then(function (data) {
      var obj = _objectSpread2({}, data);

      Object.keys(data).forEach(function (name) {
        obj[name] = form.isFieldTouched(name) ? form.getFieldValue(name) : data[name];
      });
      setDefaultFormValuesLoading(false);
      setInitialValues(data);
      form.setFieldsValue(obj);
    }).catch(function () {
      setDefaultFormValuesLoading(false);
    });
  }, []);
  var formProps = version === 4 ? {
    form: formInstance,
    onFinish: onFinish,
    initialValues: initialValues
  } : {
    onSubmit: function onSubmit(e) {
      e.preventDefault();
      formInstance.validateFields(function (err, values) {
        if (!err) {
          onFinish(values);
        }
      });
    }
  };
  return {
    form: formInstance,
    formProps: formProps,
    defaultFormValuesLoading: defaultFormValuesLoading,
    formValues: formValues,
    initialValues: initialValues,
    formResult: formResult,
    formLoading: formLoading,
    submit: function submit(values) {
      form.setFieldsValue(values);
      return onFinish(form.getFieldsValue());
    }
  };
};

exports.useForm = useForm;
