import { useEffect } from 'react';
import { useCascadeSearch } from '@sunflower-hooks/cascade-search';

var useCascadeSelect = function useCascadeSelect(_ref) {
  var _ref$list = _ref.list,
      list = _ref$list === void 0 ? [] : _ref$list,
      _ref$autoFirstSearch = _ref.autoFirstSearch,
      autoFirstSearch = _ref$autoFirstSearch === void 0 ? true : _ref$autoFirstSearch,
      form = _ref.form;

  var _useCascadeSearch = useCascadeSearch({
    list: list.map(function (item) {
      return function (lastValue) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        return item.options.apply(item, args);
      };
    })
  }),
      search = _useCascadeSearch.search,
      responseDataList = _useCascadeSearch.responseDataList,
      loadingList = _useCascadeSearch.loadingList,
      setResponseDataList = _useCascadeSearch.setResponseDataList;

  var selects = list.map(function (item, index) {
    var options = responseDataList[index] || [];
    return {
      props: {
        loading: loadingList[index],
        onChange: function onChange(val) {
          if (val) {
            search(index + 1, val);
          }

          if (form) {
            var values = {};

            for (var i = index + 1; i < list.length; i += 1) {
              values[list[i].name] = undefined;
            }

            var nextResponseDataList = responseDataList.slice(0, index + 1);
            form.setFieldsValue(values);
            setResponseDataList(nextResponseDataList);
          }
        }
      },
      options: options
    };
  });
  useEffect(function () {
    if (autoFirstSearch && !responseDataList[0]) {
      search(0);
    }
  }, []);
  return {
    search: search,
    selects: selects
  };
};

export { useCascadeSelect };
