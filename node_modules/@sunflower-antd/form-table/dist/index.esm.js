import 'antd/es/form/style';
import _Form from 'antd/es/form';
import { useState } from 'react';
import { useSearchResult } from '@sunflower-hooks/search-result';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var useFormTable = function useFormTable(config) {
  var formTableConfig = config || {};
  var search = formTableConfig.search,
      _formTableConfig$auto = formTableConfig.autoFirstSearch,
      autoFirstSearch = _formTableConfig$auto === void 0 ? true : _formTableConfig$auto,
      _formTableConfig$defa = formTableConfig.defaultPageSize,
      defaultPageSize = _formTableConfig$defa === void 0 ? 10 : _formTableConfig$defa,
      _formTableConfig$defa2 = formTableConfig.defaultCurrent,
      defaultCurrent = _formTableConfig$defa2 === void 0 ? 1 : _formTableConfig$defa2,
      _formTableConfig$defa3 = formTableConfig.defaultFormValues,
      defaultFormValues = _formTableConfig$defa3 === void 0 ? {} : _formTableConfig$defa3,
      form = formTableConfig.form;
  var version = 3; // antd4

  if (_Form['useForm']) {
    version = 4;
  }

  var formInstance = form;

  if (!form) {
    if (version === 4) {
      var _Form$useForm = _Form['useForm']();

      var _Form$useForm2 = _slicedToArray(_Form$useForm, 1);

      formInstance = _Form$useForm2[0];
    } else {
      throw new Error('"form" need in antd@3');
    }
  }

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      initialValues = _useState2[0],
      setInitialValues = _useState2[1];

  var _useSearchResultHooks = useSearchResult({
    search: search,
    autoFirstSearch: autoFirstSearch,
    defaultRequestData: function defaultRequestData() {
      var value;

      if (typeof defaultFormValues === 'function') {
        value = defaultFormValues();
      } else {
        value = defaultFormValues;
      }

      return Promise.resolve(value).then(function (data) {
        var touched = form.isFieldsTouched();

        var obj = _objectSpread2({}, data);

        Object.keys(data).forEach(function (name) {
          obj[name] = form.isFieldTouched(name) ? form.getFieldValue(name) : data[name];
        });
        setInitialValues(data);
        form.setFieldsValue(obj);

        if (touched) {
          setRequestData(_objectSpread2({
            pageSize: defaultPageSize,
            current: defaultCurrent
          }, obj));
          throw new Error('will not autoFirstSearch');
        }

        return _objectSpread2({
          pageSize: defaultPageSize,
          current: defaultCurrent
        }, obj);
      });
    }
  }),
      loading = _useSearchResultHooks.loading,
      _useSearchResultHooks2 = _useSearchResultHooks.requestData,
      requestData = _useSearchResultHooks2 === void 0 ? {} : _useSearchResultHooks2,
      setRequestData = _useSearchResultHooks.setRequestData,
      _useSearchResultHooks3 = _useSearchResultHooks.responseData,
      responseData = _useSearchResultHooks3 === void 0 ? {} : _useSearchResultHooks3,
      defaultRequestDataLoading = _useSearchResultHooks.defaultRequestDataLoading,
      searchFunc = _useSearchResultHooks.search;

  var onFinish = function onFinish(values) {
    searchFunc(_objectSpread2({
      current: 1,
      pageSize: requestData.pageSize
    }, values));
  };

  var onChange = function onChange(pagination, filters, sorter) {
    searchFunc(_objectSpread2({}, requestData, {
      current: pagination.current === requestData.current ? 1 : pagination.current,
      pageSize: pagination.pageSize,
      filters: filters,
      sorter: sorter
    }));
  };

  var formProps = version === 4 ? {
    form: formInstance,
    onFinish: onFinish,
    initialValues: initialValues
  } : {
    onSubmit: function onSubmit(e) {
      e.preventDefault();
      formInstance.validateFields(function (err, values) {
        if (!err) {
          searchFunc(_objectSpread2({
            current: 1,
            pageSize: requestData.pageSize
          }, values));
        }
      });
    }
  };
  var tableProps = {
    pagination: {
      pageSize: requestData.pageSize,
      current: requestData.current,
      defaultPageSize: defaultPageSize,
      defaultCurrent: defaultCurrent,
      total: responseData.total
    },
    loading: loading,
    dataSource: responseData.dataSource,
    onChange: onChange
  };

  var formValues = _objectSpread2({}, requestData);

  delete formValues.current;
  delete formValues.pageSize;
  delete formValues.filter;
  delete formValues.sorter;
  return {
    form: formInstance,
    formProps: formProps,
    tableProps: tableProps,
    loading: loading,
    defaultFormValuesLoading: defaultRequestDataLoading,
    formValues: formValues,
    filters: requestData.filters,
    sorter: requestData.sorter,
    current: requestData.current,
    pageSize: requestData.pageSize,
    dataSource: responseData.dataSource,
    total: responseData.total,
    search: function search(data) {
      searchFunc(_objectSpread2({}, requestData, {}, data));
    }
  };
};

export { useFormTable };
